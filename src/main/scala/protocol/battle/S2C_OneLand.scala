// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.battle

@SerialVersionUID(0L)
final case class S2C_OneLand(
    iD: _root_.scala.Int,
    leftX: _root_.scala.Float,
    leftY: _root_.scala.Float,
    rightX: _root_.scala.Float,
    rightY: _root_.scala.Float,
    canCrossUp: _root_.scala.Boolean,
    canCrossDown: _root_.scala.Boolean,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[S2C_OneLand] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = iD
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      };
      
      {
        val __value = leftX
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(2, __value)
      };
      
      {
        val __value = leftY
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, __value)
      };
      
      {
        val __value = rightX
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, __value)
      };
      
      {
        val __value = rightY
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(5, __value)
      };
      
      {
        val __value = canCrossUp
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
      };
      
      {
        val __value = canCrossDown
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = iD
        _output__.writeInt32(1, __v)
      };
      
      {
        val __v = leftX
        _output__.writeFloat(2, __v)
      };
      
      {
        val __v = leftY
        _output__.writeFloat(3, __v)
      };
      
      {
        val __v = rightX
        _output__.writeFloat(4, __v)
      };
      
      {
        val __v = rightY
        _output__.writeFloat(5, __v)
      };
      
      {
        val __v = canCrossUp
        _output__.writeBool(6, __v)
      };
      
      {
        val __v = canCrossDown
        _output__.writeBool(7, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withID(__v: _root_.scala.Int): S2C_OneLand = copy(iD = __v)
    def withLeftX(__v: _root_.scala.Float): S2C_OneLand = copy(leftX = __v)
    def withLeftY(__v: _root_.scala.Float): S2C_OneLand = copy(leftY = __v)
    def withRightX(__v: _root_.scala.Float): S2C_OneLand = copy(rightX = __v)
    def withRightY(__v: _root_.scala.Float): S2C_OneLand = copy(rightY = __v)
    def withCanCrossUp(__v: _root_.scala.Boolean): S2C_OneLand = copy(canCrossUp = __v)
    def withCanCrossDown(__v: _root_.scala.Boolean): S2C_OneLand = copy(canCrossDown = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => iD
        case 2 => leftX
        case 3 => leftY
        case 4 => rightX
        case 5 => rightY
        case 6 => canCrossUp
        case 7 => canCrossDown
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(iD)
        case 2 => _root_.scalapb.descriptors.PFloat(leftX)
        case 3 => _root_.scalapb.descriptors.PFloat(leftY)
        case 4 => _root_.scalapb.descriptors.PFloat(rightX)
        case 5 => _root_.scalapb.descriptors.PFloat(rightY)
        case 6 => _root_.scalapb.descriptors.PBoolean(canCrossUp)
        case 7 => _root_.scalapb.descriptors.PBoolean(canCrossDown)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.battle.S2C_OneLand
    // @@protoc_insertion_point(GeneratedMessage[protocol.S2C_OneLand])
}

object S2C_OneLand extends scalapb.GeneratedMessageCompanion[protocol.battle.S2C_OneLand] with scalapb.HasBuilder[protocol.battle.S2C_OneLand] with scalapb.JavaProtoSupport[protocol.battle.S2C_OneLand, protocol.Battle.S2C_OneLand] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.battle.S2C_OneLand] with scalapb.HasBuilder[protocol.battle.S2C_OneLand] with scalapb.JavaProtoSupport[protocol.battle.S2C_OneLand, protocol.Battle.S2C_OneLand] = this
  def toJavaProto(scalaPbSource: protocol.battle.S2C_OneLand): protocol.Battle.S2C_OneLand = {
    val javaPbOut = protocol.Battle.S2C_OneLand.newBuilder
    javaPbOut.setID(scalaPbSource.iD)
    javaPbOut.setLeftX(scalaPbSource.leftX)
    javaPbOut.setLeftY(scalaPbSource.leftY)
    javaPbOut.setRightX(scalaPbSource.rightX)
    javaPbOut.setRightY(scalaPbSource.rightY)
    javaPbOut.setCanCrossUp(scalaPbSource.canCrossUp)
    javaPbOut.setCanCrossDown(scalaPbSource.canCrossDown)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Battle.S2C_OneLand): protocol.battle.S2C_OneLand = protocol.battle.S2C_OneLand(
    iD = javaPbSource.getID.intValue,
    leftX = javaPbSource.getLeftX.floatValue,
    leftY = javaPbSource.getLeftY.floatValue,
    rightX = javaPbSource.getRightX.floatValue,
    rightY = javaPbSource.getRightY.floatValue,
    canCrossUp = javaPbSource.getCanCrossUp.booleanValue,
    canCrossDown = javaPbSource.getCanCrossDown.booleanValue
  )
  def merge(`_message__`: protocol.battle.S2C_OneLand, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.battle.S2C_OneLand = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.battle.S2C_OneLand] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.battle.S2C_OneLand(
        iD = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        leftX = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Float],
        leftY = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Float],
        rightX = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[_root_.scala.Float],
        rightY = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scala.Float],
        canCrossUp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).get.as[_root_.scala.Boolean],
        canCrossDown = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[_root_.scala.Boolean]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BattleProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BattleProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.battle.S2C_OneLand(
    iD = 0,
    leftX = 0.0f,
    leftY = 0.0f,
    rightX = 0.0f,
    rightY = 0.0f,
    canCrossUp = false,
    canCrossDown = false
  )
  final class Builder private (
    private var __iD: _root_.scala.Int,
    private var __leftX: _root_.scala.Float,
    private var __leftY: _root_.scala.Float,
    private var __rightX: _root_.scala.Float,
    private var __rightY: _root_.scala.Float,
    private var __canCrossUp: _root_.scala.Boolean,
    private var __canCrossDown: _root_.scala.Boolean,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.battle.S2C_OneLand] {
    private var __requiredFields0: _root_.scala.Long = 0x7fL
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __iD = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 21 =>
            __leftX = _input__.readFloat()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 29 =>
            __leftY = _input__.readFloat()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 37 =>
            __rightX = _input__.readFloat()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 45 =>
            __rightY = _input__.readFloat()
            __requiredFields0 &= 0xffffffffffffffefL
          case 48 =>
            __canCrossUp = _input__.readBool()
            __requiredFields0 &= 0xffffffffffffffdfL
          case 56 =>
            __canCrossDown = _input__.readBool()
            __requiredFields0 &= 0xffffffffffffffbfL
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.battle.S2C_OneLand = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protocol.battle.S2C_OneLand(
        iD = __iD,
        leftX = __leftX,
        leftY = __leftY,
        rightX = __rightX,
        rightY = __rightY,
        canCrossUp = __canCrossUp,
        canCrossDown = __canCrossDown,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.battle.S2C_OneLand, protocol.battle.S2C_OneLand.Builder] {
    def apply(): Builder = new Builder(
      __iD = 0,
      __leftX = 0.0f,
      __leftY = 0.0f,
      __rightX = 0.0f,
      __rightY = 0.0f,
      __canCrossUp = false,
      __canCrossDown = false,
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.battle.S2C_OneLand): Builder = new Builder(
        __iD = _message__.iD,
        __leftX = _message__.leftX,
        __leftY = _message__.leftY,
        __rightX = _message__.rightX,
        __rightY = _message__.rightY,
        __canCrossUp = _message__.canCrossUp,
        __canCrossDown = _message__.canCrossDown,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.battle.S2C_OneLand.Builder()
  def newBuilder(`_message__`: protocol.battle.S2C_OneLand): Builder = protocol.battle.S2C_OneLand.Builder(_message__)
  implicit class S2C_OneLandLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.battle.S2C_OneLand]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.battle.S2C_OneLand](_l) {
    def iD: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.iD)((c_, f_) => c_.copy(iD = f_))
    def leftX: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.leftX)((c_, f_) => c_.copy(leftX = f_))
    def leftY: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.leftY)((c_, f_) => c_.copy(leftY = f_))
    def rightX: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.rightX)((c_, f_) => c_.copy(rightX = f_))
    def rightY: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.rightY)((c_, f_) => c_.copy(rightY = f_))
    def canCrossUp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.canCrossUp)((c_, f_) => c_.copy(canCrossUp = f_))
    def canCrossDown: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.canCrossDown)((c_, f_) => c_.copy(canCrossDown = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val LEFTX_FIELD_NUMBER = 2
  final val LEFTY_FIELD_NUMBER = 3
  final val RIGHTX_FIELD_NUMBER = 4
  final val RIGHTY_FIELD_NUMBER = 5
  final val CANCROSSUP_FIELD_NUMBER = 6
  final val CANCROSSDOWN_FIELD_NUMBER = 7
  def of(
    iD: _root_.scala.Int,
    leftX: _root_.scala.Float,
    leftY: _root_.scala.Float,
    rightX: _root_.scala.Float,
    rightY: _root_.scala.Float,
    canCrossUp: _root_.scala.Boolean,
    canCrossDown: _root_.scala.Boolean
  ): _root_.protocol.battle.S2C_OneLand = _root_.protocol.battle.S2C_OneLand(
    iD,
    leftX,
    leftY,
    rightX,
    rightY,
    canCrossUp,
    canCrossDown
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.S2C_OneLand])
}
