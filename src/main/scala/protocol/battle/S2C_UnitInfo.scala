// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.battle

@SerialVersionUID(0L)
final case class S2C_UnitInfo(
    iD: _root_.scala.Int,
    unitType: _root_.scala.Int,
    controlPlayer: _root_.scala.Int,
    handControl: _root_.scala.Boolean,
    hpRate: _root_.scala.Float,
    mpRate: _root_.scala.Float,
    nowInput: _root_.scala.Boolean,
    nowInputDir: _root_.scala.Float,
    randomSeed: _root_.scala.Int,
    unitMoveInfo: protocol.battle.S2C_C2S_UnitMoveInfo,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[S2C_UnitInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = iD
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      };
      
      {
        val __value = unitType
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      
      {
        val __value = controlPlayer
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
      };
      
      {
        val __value = handControl
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
      };
      
      {
        val __value = hpRate
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(5, __value)
      };
      
      {
        val __value = mpRate
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(10, __value)
      };
      
      {
        val __value = nowInput
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
      };
      
      {
        val __value = nowInputDir
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(7, __value)
      };
      
      {
        val __value = randomSeed
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, __value)
      };
      
      {
        val __value = unitMoveInfo
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = iD
        _output__.writeInt32(1, __v)
      };
      
      {
        val __v = unitType
        _output__.writeInt32(2, __v)
      };
      
      {
        val __v = controlPlayer
        _output__.writeInt32(3, __v)
      };
      
      {
        val __v = handControl
        _output__.writeBool(4, __v)
      };
      
      {
        val __v = hpRate
        _output__.writeFloat(5, __v)
      };
      
      {
        val __v = nowInput
        _output__.writeBool(6, __v)
      };
      
      {
        val __v = nowInputDir
        _output__.writeFloat(7, __v)
      };
      
      {
        val __v = randomSeed
        _output__.writeInt32(8, __v)
      };
      
      {
        val __v = unitMoveInfo
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      
      {
        val __v = mpRate
        _output__.writeFloat(10, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withID(__v: _root_.scala.Int): S2C_UnitInfo = copy(iD = __v)
    def withUnitType(__v: _root_.scala.Int): S2C_UnitInfo = copy(unitType = __v)
    def withControlPlayer(__v: _root_.scala.Int): S2C_UnitInfo = copy(controlPlayer = __v)
    def withHandControl(__v: _root_.scala.Boolean): S2C_UnitInfo = copy(handControl = __v)
    def withHpRate(__v: _root_.scala.Float): S2C_UnitInfo = copy(hpRate = __v)
    def withMpRate(__v: _root_.scala.Float): S2C_UnitInfo = copy(mpRate = __v)
    def withNowInput(__v: _root_.scala.Boolean): S2C_UnitInfo = copy(nowInput = __v)
    def withNowInputDir(__v: _root_.scala.Float): S2C_UnitInfo = copy(nowInputDir = __v)
    def withRandomSeed(__v: _root_.scala.Int): S2C_UnitInfo = copy(randomSeed = __v)
    def withUnitMoveInfo(__v: protocol.battle.S2C_C2S_UnitMoveInfo): S2C_UnitInfo = copy(unitMoveInfo = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => iD
        case 2 => unitType
        case 3 => controlPlayer
        case 4 => handControl
        case 5 => hpRate
        case 10 => mpRate
        case 6 => nowInput
        case 7 => nowInputDir
        case 8 => randomSeed
        case 9 => unitMoveInfo
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(iD)
        case 2 => _root_.scalapb.descriptors.PInt(unitType)
        case 3 => _root_.scalapb.descriptors.PInt(controlPlayer)
        case 4 => _root_.scalapb.descriptors.PBoolean(handControl)
        case 5 => _root_.scalapb.descriptors.PFloat(hpRate)
        case 10 => _root_.scalapb.descriptors.PFloat(mpRate)
        case 6 => _root_.scalapb.descriptors.PBoolean(nowInput)
        case 7 => _root_.scalapb.descriptors.PFloat(nowInputDir)
        case 8 => _root_.scalapb.descriptors.PInt(randomSeed)
        case 9 => unitMoveInfo.toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.battle.S2C_UnitInfo
    // @@protoc_insertion_point(GeneratedMessage[protocol.S2C_UnitInfo])
}

object S2C_UnitInfo extends scalapb.GeneratedMessageCompanion[protocol.battle.S2C_UnitInfo] with scalapb.HasBuilder[protocol.battle.S2C_UnitInfo] with scalapb.JavaProtoSupport[protocol.battle.S2C_UnitInfo, protocol.Battle.S2C_UnitInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.battle.S2C_UnitInfo] with scalapb.HasBuilder[protocol.battle.S2C_UnitInfo] with scalapb.JavaProtoSupport[protocol.battle.S2C_UnitInfo, protocol.Battle.S2C_UnitInfo] = this
  def toJavaProto(scalaPbSource: protocol.battle.S2C_UnitInfo): protocol.Battle.S2C_UnitInfo = {
    val javaPbOut = protocol.Battle.S2C_UnitInfo.newBuilder
    javaPbOut.setID(scalaPbSource.iD)
    javaPbOut.setUnitType(scalaPbSource.unitType)
    javaPbOut.setControlPlayer(scalaPbSource.controlPlayer)
    javaPbOut.setHandControl(scalaPbSource.handControl)
    javaPbOut.setHpRate(scalaPbSource.hpRate)
    javaPbOut.setMpRate(scalaPbSource.mpRate)
    javaPbOut.setNowInput(scalaPbSource.nowInput)
    javaPbOut.setNowInputDir(scalaPbSource.nowInputDir)
    javaPbOut.setRandomSeed(scalaPbSource.randomSeed)
    javaPbOut.setUnitMoveInfo(protocol.battle.S2C_C2S_UnitMoveInfo.toJavaProto(scalaPbSource.unitMoveInfo))
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Battle.S2C_UnitInfo): protocol.battle.S2C_UnitInfo = protocol.battle.S2C_UnitInfo(
    iD = javaPbSource.getID.intValue,
    unitType = javaPbSource.getUnitType.intValue,
    controlPlayer = javaPbSource.getControlPlayer.intValue,
    handControl = javaPbSource.getHandControl.booleanValue,
    hpRate = javaPbSource.getHpRate.floatValue,
    mpRate = javaPbSource.getMpRate.floatValue,
    nowInput = javaPbSource.getNowInput.booleanValue,
    nowInputDir = javaPbSource.getNowInputDir.floatValue,
    randomSeed = javaPbSource.getRandomSeed.intValue,
    unitMoveInfo = protocol.battle.S2C_C2S_UnitMoveInfo.fromJavaProto(javaPbSource.getUnitMoveInfo)
  )
  def merge(`_message__`: protocol.battle.S2C_UnitInfo, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.battle.S2C_UnitInfo = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.battle.S2C_UnitInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.battle.S2C_UnitInfo(
        iD = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        unitType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        controlPlayer = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Int],
        handControl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[_root_.scala.Boolean],
        hpRate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scala.Float],
        mpRate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).get.as[_root_.scala.Float],
        nowInput = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).get.as[_root_.scala.Boolean],
        nowInputDir = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[_root_.scala.Float],
        randomSeed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).get.as[_root_.scala.Int],
        unitMoveInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).get.as[protocol.battle.S2C_C2S_UnitMoveInfo]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BattleProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BattleProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 9 => __out = protocol.battle.S2C_C2S_UnitMoveInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.battle.S2C_UnitInfo(
    iD = 0,
    unitType = 0,
    controlPlayer = 0,
    handControl = false,
    hpRate = 0.0f,
    mpRate = 0.0f,
    nowInput = false,
    nowInputDir = 0.0f,
    randomSeed = 0,
    unitMoveInfo = protocol.battle.S2C_C2S_UnitMoveInfo.defaultInstance
  )
  final class Builder private (
    private var __iD: _root_.scala.Int,
    private var __unitType: _root_.scala.Int,
    private var __controlPlayer: _root_.scala.Int,
    private var __handControl: _root_.scala.Boolean,
    private var __hpRate: _root_.scala.Float,
    private var __mpRate: _root_.scala.Float,
    private var __nowInput: _root_.scala.Boolean,
    private var __nowInputDir: _root_.scala.Float,
    private var __randomSeed: _root_.scala.Int,
    private var __unitMoveInfo: _root_.scala.Option[protocol.battle.S2C_C2S_UnitMoveInfo],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.battle.S2C_UnitInfo] {
    private var __requiredFields0: _root_.scala.Long = 0x3ffL
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __iD = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __unitType = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __controlPlayer = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __handControl = _input__.readBool()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 45 =>
            __hpRate = _input__.readFloat()
            __requiredFields0 &= 0xffffffffffffffefL
          case 85 =>
            __mpRate = _input__.readFloat()
            __requiredFields0 &= 0xffffffffffffffdfL
          case 48 =>
            __nowInput = _input__.readBool()
            __requiredFields0 &= 0xffffffffffffffbfL
          case 61 =>
            __nowInputDir = _input__.readFloat()
            __requiredFields0 &= 0xffffffffffffff7fL
          case 64 =>
            __randomSeed = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffeffL
          case 74 =>
            __unitMoveInfo = _root_.scala.Some(__unitMoveInfo.fold(_root_.scalapb.LiteParser.readMessage[protocol.battle.S2C_C2S_UnitMoveInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
            __requiredFields0 &= 0xfffffffffffffdffL
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.battle.S2C_UnitInfo = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protocol.battle.S2C_UnitInfo(
        iD = __iD,
        unitType = __unitType,
        controlPlayer = __controlPlayer,
        handControl = __handControl,
        hpRate = __hpRate,
        mpRate = __mpRate,
        nowInput = __nowInput,
        nowInputDir = __nowInputDir,
        randomSeed = __randomSeed,
        unitMoveInfo = __unitMoveInfo.getOrElse(protocol.battle.S2C_C2S_UnitMoveInfo.defaultInstance),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.battle.S2C_UnitInfo, protocol.battle.S2C_UnitInfo.Builder] {
    def apply(): Builder = new Builder(
      __iD = 0,
      __unitType = 0,
      __controlPlayer = 0,
      __handControl = false,
      __hpRate = 0.0f,
      __mpRate = 0.0f,
      __nowInput = false,
      __nowInputDir = 0.0f,
      __randomSeed = 0,
      __unitMoveInfo = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.battle.S2C_UnitInfo): Builder = new Builder(
        __iD = _message__.iD,
        __unitType = _message__.unitType,
        __controlPlayer = _message__.controlPlayer,
        __handControl = _message__.handControl,
        __hpRate = _message__.hpRate,
        __mpRate = _message__.mpRate,
        __nowInput = _message__.nowInput,
        __nowInputDir = _message__.nowInputDir,
        __randomSeed = _message__.randomSeed,
        __unitMoveInfo = _root_.scala.Some(_message__.unitMoveInfo),
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.battle.S2C_UnitInfo.Builder()
  def newBuilder(`_message__`: protocol.battle.S2C_UnitInfo): Builder = protocol.battle.S2C_UnitInfo.Builder(_message__)
  implicit class S2C_UnitInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.battle.S2C_UnitInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.battle.S2C_UnitInfo](_l) {
    def iD: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.iD)((c_, f_) => c_.copy(iD = f_))
    def unitType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.unitType)((c_, f_) => c_.copy(unitType = f_))
    def controlPlayer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.controlPlayer)((c_, f_) => c_.copy(controlPlayer = f_))
    def handControl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.handControl)((c_, f_) => c_.copy(handControl = f_))
    def hpRate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.hpRate)((c_, f_) => c_.copy(hpRate = f_))
    def mpRate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.mpRate)((c_, f_) => c_.copy(mpRate = f_))
    def nowInput: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.nowInput)((c_, f_) => c_.copy(nowInput = f_))
    def nowInputDir: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.nowInputDir)((c_, f_) => c_.copy(nowInputDir = f_))
    def randomSeed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.randomSeed)((c_, f_) => c_.copy(randomSeed = f_))
    def unitMoveInfo: _root_.scalapb.lenses.Lens[UpperPB, protocol.battle.S2C_C2S_UnitMoveInfo] = field(_.unitMoveInfo)((c_, f_) => c_.copy(unitMoveInfo = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val UNITTYPE_FIELD_NUMBER = 2
  final val CONTROLPLAYER_FIELD_NUMBER = 3
  final val HANDCONTROL_FIELD_NUMBER = 4
  final val HPRATE_FIELD_NUMBER = 5
  final val MPRATE_FIELD_NUMBER = 10
  final val NOWINPUT_FIELD_NUMBER = 6
  final val NOWINPUTDIR_FIELD_NUMBER = 7
  final val RANDOMSEED_FIELD_NUMBER = 8
  final val UNITMOVEINFO_FIELD_NUMBER = 9
  def of(
    iD: _root_.scala.Int,
    unitType: _root_.scala.Int,
    controlPlayer: _root_.scala.Int,
    handControl: _root_.scala.Boolean,
    hpRate: _root_.scala.Float,
    mpRate: _root_.scala.Float,
    nowInput: _root_.scala.Boolean,
    nowInputDir: _root_.scala.Float,
    randomSeed: _root_.scala.Int,
    unitMoveInfo: protocol.battle.S2C_C2S_UnitMoveInfo
  ): _root_.protocol.battle.S2C_UnitInfo = _root_.protocol.battle.S2C_UnitInfo(
    iD,
    unitType,
    controlPlayer,
    handControl,
    hpRate,
    mpRate,
    nowInput,
    nowInputDir,
    randomSeed,
    unitMoveInfo
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.S2C_UnitInfo])
}
