// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.battle
import _root_.scalapb.internal.compat.JavaConverters._

@SerialVersionUID(0L)
final case class S2C_AllLands(
    lands: _root_.scala.Seq[protocol.battle.S2C_OneLand] = _root_.scala.Seq.empty,
    leftLimit: _root_.scala.Float,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[S2C_AllLands] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      lands.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = leftLimit
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(2, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      lands.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      
      {
        val __v = leftLimit
        _output__.writeFloat(2, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def clearLands = copy(lands = _root_.scala.Seq.empty)
    def addLands(__vs: protocol.battle.S2C_OneLand*): S2C_AllLands = addAllLands(__vs)
    def addAllLands(__vs: Iterable[protocol.battle.S2C_OneLand]): S2C_AllLands = copy(lands = lands ++ __vs)
    def withLands(__v: _root_.scala.Seq[protocol.battle.S2C_OneLand]): S2C_AllLands = copy(lands = __v)
    def withLeftLimit(__v: _root_.scala.Float): S2C_AllLands = copy(leftLimit = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => lands
        case 2 => leftLimit
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(lands.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PFloat(leftLimit)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.battle.S2C_AllLands
    // @@protoc_insertion_point(GeneratedMessage[protocol.S2C_AllLands])
}

object S2C_AllLands extends scalapb.GeneratedMessageCompanion[protocol.battle.S2C_AllLands] with scalapb.HasBuilder[protocol.battle.S2C_AllLands] with scalapb.JavaProtoSupport[protocol.battle.S2C_AllLands, protocol.Battle.S2C_AllLands] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.battle.S2C_AllLands] with scalapb.HasBuilder[protocol.battle.S2C_AllLands] with scalapb.JavaProtoSupport[protocol.battle.S2C_AllLands, protocol.Battle.S2C_AllLands] = this
  def toJavaProto(scalaPbSource: protocol.battle.S2C_AllLands): protocol.Battle.S2C_AllLands = {
    val javaPbOut = protocol.Battle.S2C_AllLands.newBuilder
    javaPbOut.addAllLands(_root_.scalapb.internal.compat.toIterable(scalaPbSource.lands.iterator.map(protocol.battle.S2C_OneLand.toJavaProto(_))).asJava)
    javaPbOut.setLeftLimit(scalaPbSource.leftLimit)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Battle.S2C_AllLands): protocol.battle.S2C_AllLands = protocol.battle.S2C_AllLands(
    lands = javaPbSource.getLandsList.asScala.iterator.map(protocol.battle.S2C_OneLand.fromJavaProto(_)).toSeq,
    leftLimit = javaPbSource.getLeftLimit.floatValue
  )
  def merge(`_message__`: protocol.battle.S2C_AllLands, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.battle.S2C_AllLands = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.battle.S2C_AllLands] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.battle.S2C_AllLands(
        lands = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[protocol.battle.S2C_OneLand]]).getOrElse(_root_.scala.Seq.empty),
        leftLimit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Float]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BattleProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BattleProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = protocol.battle.S2C_OneLand
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.battle.S2C_AllLands(
    lands = _root_.scala.Seq.empty,
    leftLimit = 0.0f
  )
  final class Builder private (
    private val __lands: _root_.scala.collection.immutable.VectorBuilder[protocol.battle.S2C_OneLand],
    private var __leftLimit: _root_.scala.Float,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.battle.S2C_AllLands] {
    private var __requiredFields0: _root_.scala.Long = 0x1L
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __lands += _root_.scalapb.LiteParser.readMessage[protocol.battle.S2C_OneLand](_input__)
          case 21 =>
            __leftLimit = _input__.readFloat()
            __requiredFields0 &= 0xfffffffffffffffeL
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.battle.S2C_AllLands = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protocol.battle.S2C_AllLands(
        lands = __lands.result(),
        leftLimit = __leftLimit,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.battle.S2C_AllLands, protocol.battle.S2C_AllLands.Builder] {
    def apply(): Builder = new Builder(
      __lands = new _root_.scala.collection.immutable.VectorBuilder[protocol.battle.S2C_OneLand],
      __leftLimit = 0.0f,
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.battle.S2C_AllLands): Builder = new Builder(
        __lands = new _root_.scala.collection.immutable.VectorBuilder[protocol.battle.S2C_OneLand] ++= _message__.lands,
        __leftLimit = _message__.leftLimit,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.battle.S2C_AllLands.Builder()
  def newBuilder(`_message__`: protocol.battle.S2C_AllLands): Builder = protocol.battle.S2C_AllLands.Builder(_message__)
  implicit class S2C_AllLandsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.battle.S2C_AllLands]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.battle.S2C_AllLands](_l) {
    def lands: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[protocol.battle.S2C_OneLand]] = field(_.lands)((c_, f_) => c_.copy(lands = f_))
    def leftLimit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.leftLimit)((c_, f_) => c_.copy(leftLimit = f_))
  }
  final val LANDS_FIELD_NUMBER = 1
  final val LEFTLIMIT_FIELD_NUMBER = 2
  def of(
    lands: _root_.scala.Seq[protocol.battle.S2C_OneLand],
    leftLimit: _root_.scala.Float
  ): _root_.protocol.battle.S2C_AllLands = _root_.protocol.battle.S2C_AllLands(
    lands,
    leftLimit
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.S2C_AllLands])
}
