// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.scene

@SerialVersionUID(0L)
final case class AttributeMap(
                               id: _root_.scala.Int,
                               value: _root_.scala.Long,
                               unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
                             ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AttributeMap] {
  @transient
  private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0

  private[this] def __computeSerializedValue(): _root_.scala.Int = {
    var __size = 0

    {
      val __value = id
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
    };

    {
      val __value = value
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
    };
    __size += unknownFields.serializedSize
    __size
  }

  override def serializedSize: _root_.scala.Int = {
    var read = __serializedSizeCachedValue
    if (read == 0) {
      read = __computeSerializedValue()
      __serializedSizeCachedValue = read
    }
    read
  }

  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {

    {
      val __v = id
      _output__.writeInt32(1, __v)
    };

    {
      val __v = value
      _output__.writeInt64(2, __v)
    };
    unknownFields.writeTo(_output__)
  }

  def withId(__v: _root_.scala.Int): AttributeMap = copy(id = __v)

  def withValue(__v: _root_.scala.Long): AttributeMap = copy(value = __v)

  def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)

  def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)

  def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => id
      case 2 => value
    }
  }

  def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
    _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
    (__field.number: @_root_.scala.unchecked) match {
      case 1 => _root_.scalapb.descriptors.PInt(id)
      case 2 => _root_.scalapb.descriptors.PLong(value)
    }
  }

  def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)

  def companion = protocol.scene.AttributeMap
  // @@protoc_insertion_point(GeneratedMessage[protocol.AttributeMap])
}

object AttributeMap extends scalapb.GeneratedMessageCompanion[protocol.scene.AttributeMap] with scalapb.HasBuilder[protocol.scene.AttributeMap] with scalapb.JavaProtoSupport[protocol.scene.AttributeMap, protocol.Scene.AttributeMap] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.scene.AttributeMap] with scalapb.HasBuilder[protocol.scene.AttributeMap] with scalapb.JavaProtoSupport[protocol.scene.AttributeMap, protocol.Scene.AttributeMap] = this

  def toJavaProto(scalaPbSource: protocol.scene.AttributeMap): protocol.Scene.AttributeMap = {
    val javaPbOut = protocol.Scene.AttributeMap.newBuilder
    javaPbOut.setId(scalaPbSource.id)
    javaPbOut.setValue(scalaPbSource.value)
    javaPbOut.build
  }

  def fromJavaProto(javaPbSource: protocol.Scene.AttributeMap): protocol.scene.AttributeMap = protocol.scene.AttributeMap(
    id = javaPbSource.getId.intValue,
    value = javaPbSource.getValue.longValue
  )

  def merge(`_message__`: protocol.scene.AttributeMap, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.scene.AttributeMap = newBuilder(_message__).merge(_input__).result()

  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.scene.AttributeMap] = _root_.scalapb.descriptors.Reads {
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.scene.AttributeMap(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Long]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }

  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SceneProto.javaDescriptor.getMessageTypes().get(2)

  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SceneProto.scalaDescriptor.messages(2)

  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)

  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty

  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)

  lazy val defaultInstance = protocol.scene.AttributeMap(
    id = 0,
    value = 0L
  )

  final class Builder private(
                               private var __id: _root_.scala.Int,
                               private var __value: _root_.scala.Long,
                               private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
                             ) extends _root_.scalapb.MessageBuilder[protocol.scene.AttributeMap] {
    private var __requiredFields0: _root_.scala.Long = 0x3L

    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __value = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffdL
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }

    def result(): protocol.scene.AttributeMap = {
      if (__requiredFields0 != 0L) {
        throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.")
      }
      protocol.scene.AttributeMap(
        id = __id,
        value = __value,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }

  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.scene.AttributeMap, protocol.scene.AttributeMap.Builder] {
    def apply(): Builder = new Builder(
      __id = 0,
      __value = 0L,
      `_unknownFields__` = null
    )

    def apply(`_message__`: protocol.scene.AttributeMap): Builder = new Builder(
      __id = _message__.id,
      __value = _message__.value,
      `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }

  def newBuilder: Builder = protocol.scene.AttributeMap.Builder()

  def newBuilder(`_message__`: protocol.scene.AttributeMap): Builder = protocol.scene.AttributeMap.Builder(_message__)

  implicit class AttributeMapLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.scene.AttributeMap]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.scene.AttributeMap](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))

    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }

  final val ID_FIELD_NUMBER = 1
  final val VALUE_FIELD_NUMBER = 2

  def of(
          id: _root_.scala.Int,
          value: _root_.scala.Long
        ): _root_.protocol.scene.AttributeMap = _root_.protocol.scene.AttributeMap(
    id,
    value
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.AttributeMap])
}
