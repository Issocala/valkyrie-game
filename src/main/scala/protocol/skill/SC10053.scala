// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.skill
import _root_.scalapb.internal.compat.JavaConverters._

/** 技能结果战报
  *
  * @param skillId
  *  技能id
  * @param attackId
  *  施法战斗者
  * @param processId
  *  技能过程id
  * @param damageData
  *  目标伤害列表
  * @param skillOrganismId
  *  技能单位id
  */
@SerialVersionUID(0L)
final case class SC10053(
    skillId: _root_.scala.Int,
    attackId: _root_.scala.Long,
    processId: _root_.scala.Int,
    damageData: _root_.scala.Seq[protocol.skill.DamageData] = _root_.scala.Seq.empty,
    skillOrganismId: _root_.scala.Int,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SC10053] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = skillId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      };
      
      {
        val __value = attackId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
      };
      
      {
        val __value = processId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
      };
      damageData.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = skillOrganismId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = skillId
        _output__.writeInt32(1, __v)
      };
      
      {
        val __v = attackId
        _output__.writeInt64(2, __v)
      };
      
      {
        val __v = processId
        _output__.writeInt32(3, __v)
      };
      damageData.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      
      {
        val __v = skillOrganismId
        _output__.writeInt32(5, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withSkillId(__v: _root_.scala.Int): SC10053 = copy(skillId = __v)
    def withAttackId(__v: _root_.scala.Long): SC10053 = copy(attackId = __v)
    def withProcessId(__v: _root_.scala.Int): SC10053 = copy(processId = __v)
    def clearDamageData = copy(damageData = _root_.scala.Seq.empty)
    def addDamageData(__vs: protocol.skill.DamageData*): SC10053 = addAllDamageData(__vs)
    def addAllDamageData(__vs: Iterable[protocol.skill.DamageData]): SC10053 = copy(damageData = damageData ++ __vs)
    def withDamageData(__v: _root_.scala.Seq[protocol.skill.DamageData]): SC10053 = copy(damageData = __v)
    def withSkillOrganismId(__v: _root_.scala.Int): SC10053 = copy(skillOrganismId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => skillId
        case 2 => attackId
        case 3 => processId
        case 4 => damageData
        case 5 => skillOrganismId
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(skillId)
        case 2 => _root_.scalapb.descriptors.PLong(attackId)
        case 3 => _root_.scalapb.descriptors.PInt(processId)
        case 4 => _root_.scalapb.descriptors.PRepeated(damageData.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PInt(skillOrganismId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.skill.SC10053
    // @@protoc_insertion_point(GeneratedMessage[protocol.SC10053])
}

object SC10053 extends scalapb.GeneratedMessageCompanion[protocol.skill.SC10053] with scalapb.HasBuilder[protocol.skill.SC10053] with scalapb.JavaProtoSupport[protocol.skill.SC10053, protocol.Skill.SC10053] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.skill.SC10053] with scalapb.HasBuilder[protocol.skill.SC10053] with scalapb.JavaProtoSupport[protocol.skill.SC10053, protocol.Skill.SC10053] = this
  def toJavaProto(scalaPbSource: protocol.skill.SC10053): protocol.Skill.SC10053 = {
    val javaPbOut = protocol.Skill.SC10053.newBuilder
    javaPbOut.setSkillId(scalaPbSource.skillId)
    javaPbOut.setAttackId(scalaPbSource.attackId)
    javaPbOut.setProcessId(scalaPbSource.processId)
    javaPbOut.addAllDamageData(_root_.scalapb.internal.compat.toIterable(scalaPbSource.damageData.iterator.map(protocol.skill.DamageData.toJavaProto(_))).asJava)
    javaPbOut.setSkillOrganismId(scalaPbSource.skillOrganismId)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Skill.SC10053): protocol.skill.SC10053 = protocol.skill.SC10053(
    skillId = javaPbSource.getSkillId.intValue,
    attackId = javaPbSource.getAttackId.longValue,
    processId = javaPbSource.getProcessId.intValue,
    damageData = javaPbSource.getDamageDataList.asScala.iterator.map(protocol.skill.DamageData.fromJavaProto(_)).toSeq,
    skillOrganismId = javaPbSource.getSkillOrganismId.intValue
  )
  def merge(`_message__`: protocol.skill.SC10053, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.skill.SC10053 = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.skill.SC10053] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.skill.SC10053(
        skillId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        attackId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Long],
        processId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Int],
        damageData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[protocol.skill.DamageData]]).getOrElse(_root_.scala.Seq.empty),
        skillOrganismId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scala.Int]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SkillProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SkillProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = protocol.skill.DamageData
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.skill.SC10053(
    skillId = 0,
    attackId = 0L,
    processId = 0,
    damageData = _root_.scala.Seq.empty,
    skillOrganismId = 0
  )
  final class Builder private (
    private var __skillId: _root_.scala.Int,
    private var __attackId: _root_.scala.Long,
    private var __processId: _root_.scala.Int,
    private val __damageData: _root_.scala.collection.immutable.VectorBuilder[protocol.skill.DamageData],
    private var __skillOrganismId: _root_.scala.Int,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.skill.SC10053] {
    private var __requiredFields0: _root_.scala.Long = 0xfL
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __skillId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __attackId = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __processId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __damageData += _root_.scalapb.LiteParser.readMessage[protocol.skill.DamageData](_input__)
          case 40 =>
            __skillOrganismId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffff7L
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.skill.SC10053 = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protocol.skill.SC10053(
        skillId = __skillId,
        attackId = __attackId,
        processId = __processId,
        damageData = __damageData.result(),
        skillOrganismId = __skillOrganismId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.skill.SC10053, protocol.skill.SC10053.Builder] {
    def apply(): Builder = new Builder(
      __skillId = 0,
      __attackId = 0L,
      __processId = 0,
      __damageData = new _root_.scala.collection.immutable.VectorBuilder[protocol.skill.DamageData],
      __skillOrganismId = 0,
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.skill.SC10053): Builder = new Builder(
        __skillId = _message__.skillId,
        __attackId = _message__.attackId,
        __processId = _message__.processId,
        __damageData = new _root_.scala.collection.immutable.VectorBuilder[protocol.skill.DamageData] ++= _message__.damageData,
        __skillOrganismId = _message__.skillOrganismId,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.skill.SC10053.Builder()
  def newBuilder(`_message__`: protocol.skill.SC10053): Builder = protocol.skill.SC10053.Builder(_message__)
  implicit class SC10053Lens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.skill.SC10053]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.skill.SC10053](_l) {
    def skillId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.skillId)((c_, f_) => c_.copy(skillId = f_))
    def attackId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.attackId)((c_, f_) => c_.copy(attackId = f_))
    def processId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.processId)((c_, f_) => c_.copy(processId = f_))
    def damageData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[protocol.skill.DamageData]] = field(_.damageData)((c_, f_) => c_.copy(damageData = f_))
    def skillOrganismId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.skillOrganismId)((c_, f_) => c_.copy(skillOrganismId = f_))
  }
  final val SKILLID_FIELD_NUMBER = 1
  final val ATTACKID_FIELD_NUMBER = 2
  final val PROCESSID_FIELD_NUMBER = 3
  final val DAMAGEDATA_FIELD_NUMBER = 4
  final val SKILLORGANISMID_FIELD_NUMBER = 5
  def of(
    skillId: _root_.scala.Int,
    attackId: _root_.scala.Long,
    processId: _root_.scala.Int,
    damageData: _root_.scala.Seq[protocol.skill.DamageData],
    skillOrganismId: _root_.scala.Int
  ): _root_.protocol.skill.SC10053 = _root_.protocol.skill.SC10053(
    skillId,
    attackId,
    processId,
    damageData,
    skillOrganismId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.SC10053])
}
