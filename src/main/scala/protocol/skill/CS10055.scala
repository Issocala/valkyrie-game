// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.skill
import _root_.scalapb.internal.compat.JavaConverters._

/** 技能过程作用
  *
  * @param fightOrganismId
  *  施法者单位id
  * @param skillProcessId
  *  技能过程id
  * @param targetId
  *  目标战斗单位id
  * @param skillOrganismId
  *  技能单位id
  * @param skillPositionX
  *  技能步骤横坐标
  * @param skillPositionY
  *  技能步骤纵坐标
  * @param skillId
  *  技能id
  */
@SerialVersionUID(0L)
final case class CS10055(
    fightOrganismId: _root_.scala.Long,
    skillProcessId: _root_.scala.Int,
    targetId: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    skillOrganismId: _root_.scala.Int,
    skillPositionX: _root_.scala.Option[_root_.scala.Float] = _root_.scala.None,
    skillPositionY: _root_.scala.Option[_root_.scala.Float] = _root_.scala.None,
    skillId: _root_.scala.Int,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CS10055] {
    private[this] def targetIdSerializedSize = {
      if (__targetIdSerializedSizeField == 0) __targetIdSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        targetId.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __targetIdSerializedSizeField
    }
    @transient private[this] var __targetIdSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = fightOrganismId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      };
      
      {
        val __value = skillProcessId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      if (targetId.nonEmpty) {
        val __localsize = targetIdSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = skillOrganismId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
      };
      if (skillPositionX.isDefined) {
        val __value = skillPositionX.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(5, __value)
      };
      if (skillPositionY.isDefined) {
        val __value = skillPositionY.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(6, __value)
      };
      
      {
        val __value = skillId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = fightOrganismId
        _output__.writeInt64(1, __v)
      };
      
      {
        val __v = skillProcessId
        _output__.writeInt32(2, __v)
      };
      if (targetId.nonEmpty) {
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(targetIdSerializedSize)
        targetId.foreach(_output__.writeInt64NoTag)
      };
      
      {
        val __v = skillOrganismId
        _output__.writeInt32(4, __v)
      };
      skillPositionX.foreach { __v =>
        val __m = __v
        _output__.writeFloat(5, __m)
      };
      skillPositionY.foreach { __v =>
        val __m = __v
        _output__.writeFloat(6, __m)
      };
      
      {
        val __v = skillId
        _output__.writeInt32(7, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withFightOrganismId(__v: _root_.scala.Long): CS10055 = copy(fightOrganismId = __v)
    def withSkillProcessId(__v: _root_.scala.Int): CS10055 = copy(skillProcessId = __v)
    def clearTargetId = copy(targetId = _root_.scala.Seq.empty)
    def addTargetId(__vs: _root_.scala.Long*): CS10055 = addAllTargetId(__vs)
    def addAllTargetId(__vs: Iterable[_root_.scala.Long]): CS10055 = copy(targetId = targetId ++ __vs)
    def withTargetId(__v: _root_.scala.Seq[_root_.scala.Long]): CS10055 = copy(targetId = __v)
    def withSkillOrganismId(__v: _root_.scala.Int): CS10055 = copy(skillOrganismId = __v)
    def getSkillPositionX: _root_.scala.Float = skillPositionX.getOrElse(0.0f)
    def clearSkillPositionX: CS10055 = copy(skillPositionX = _root_.scala.None)
    def withSkillPositionX(__v: _root_.scala.Float): CS10055 = copy(skillPositionX = Option(__v))
    def getSkillPositionY: _root_.scala.Float = skillPositionY.getOrElse(0.0f)
    def clearSkillPositionY: CS10055 = copy(skillPositionY = _root_.scala.None)
    def withSkillPositionY(__v: _root_.scala.Float): CS10055 = copy(skillPositionY = Option(__v))
    def withSkillId(__v: _root_.scala.Int): CS10055 = copy(skillId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => fightOrganismId
        case 2 => skillProcessId
        case 3 => targetId
        case 4 => skillOrganismId
        case 5 => skillPositionX.orNull
        case 6 => skillPositionY.orNull
        case 7 => skillId
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(fightOrganismId)
        case 2 => _root_.scalapb.descriptors.PInt(skillProcessId)
        case 3 => _root_.scalapb.descriptors.PRepeated(targetId.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PInt(skillOrganismId)
        case 5 => skillPositionX.map(_root_.scalapb.descriptors.PFloat(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => skillPositionY.map(_root_.scalapb.descriptors.PFloat(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PInt(skillId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.skill.CS10055
    // @@protoc_insertion_point(GeneratedMessage[protocol.CS10055])
}

object CS10055 extends scalapb.GeneratedMessageCompanion[protocol.skill.CS10055] with scalapb.HasBuilder[protocol.skill.CS10055] with scalapb.JavaProtoSupport[protocol.skill.CS10055, protocol.Skill.CS10055] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.skill.CS10055] with scalapb.HasBuilder[protocol.skill.CS10055] with scalapb.JavaProtoSupport[protocol.skill.CS10055, protocol.Skill.CS10055] = this
  def toJavaProto(scalaPbSource: protocol.skill.CS10055): protocol.Skill.CS10055 = {
    val javaPbOut = protocol.Skill.CS10055.newBuilder
    javaPbOut.setFightOrganismId(scalaPbSource.fightOrganismId)
    javaPbOut.setSkillProcessId(scalaPbSource.skillProcessId)
    javaPbOut.addAllTargetId(_root_.scalapb.internal.compat.toIterable(scalaPbSource.targetId.iterator.map(_root_.scala.Long.box(_))).asJava)
    javaPbOut.setSkillOrganismId(scalaPbSource.skillOrganismId)
    scalaPbSource.skillPositionX.foreach(javaPbOut.setSkillPositionX)
    scalaPbSource.skillPositionY.foreach(javaPbOut.setSkillPositionY)
    javaPbOut.setSkillId(scalaPbSource.skillId)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Skill.CS10055): protocol.skill.CS10055 = protocol.skill.CS10055(
    fightOrganismId = javaPbSource.getFightOrganismId.longValue,
    skillProcessId = javaPbSource.getSkillProcessId.intValue,
    targetId = javaPbSource.getTargetIdList.asScala.iterator.map(_.longValue).toSeq,
    skillOrganismId = javaPbSource.getSkillOrganismId.intValue,
    skillPositionX = if (javaPbSource.hasSkillPositionX) Some(javaPbSource.getSkillPositionX.floatValue) else _root_.scala.None,
    skillPositionY = if (javaPbSource.hasSkillPositionY) Some(javaPbSource.getSkillPositionY.floatValue) else _root_.scala.None,
    skillId = javaPbSource.getSkillId.intValue
  )
  def merge(`_message__`: protocol.skill.CS10055, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.skill.CS10055 = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.skill.CS10055] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.skill.CS10055(
        fightOrganismId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Long],
        skillProcessId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        targetId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        skillOrganismId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[_root_.scala.Int],
        skillPositionX = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Float]]),
        skillPositionY = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Float]]),
        skillId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[_root_.scala.Int]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SkillProto.javaDescriptor.getMessageTypes().get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SkillProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.skill.CS10055(
    fightOrganismId = 0L,
    skillProcessId = 0,
    targetId = _root_.scala.Seq.empty,
    skillOrganismId = 0,
    skillPositionX = _root_.scala.None,
    skillPositionY = _root_.scala.None,
    skillId = 0
  )
  final class Builder private (
    private var __fightOrganismId: _root_.scala.Long,
    private var __skillProcessId: _root_.scala.Int,
    private val __targetId: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long],
    private var __skillOrganismId: _root_.scala.Int,
    private var __skillPositionX: _root_.scala.Option[_root_.scala.Float],
    private var __skillPositionY: _root_.scala.Option[_root_.scala.Float],
    private var __skillId: _root_.scala.Int,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.skill.CS10055] {
    private var __requiredFields0: _root_.scala.Long = 0xfL
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __fightOrganismId = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __skillProcessId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __targetId += _input__.readInt64()
          case 26 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __targetId += _input__.readInt64()
            }
            _input__.popLimit(oldLimit)
          }
          case 32 =>
            __skillOrganismId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 45 =>
            __skillPositionX = Option(_input__.readFloat())
          case 53 =>
            __skillPositionY = Option(_input__.readFloat())
          case 56 =>
            __skillId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffff7L
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.skill.CS10055 = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protocol.skill.CS10055(
        fightOrganismId = __fightOrganismId,
        skillProcessId = __skillProcessId,
        targetId = __targetId.result(),
        skillOrganismId = __skillOrganismId,
        skillPositionX = __skillPositionX,
        skillPositionY = __skillPositionY,
        skillId = __skillId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.skill.CS10055, protocol.skill.CS10055.Builder] {
    def apply(): Builder = new Builder(
      __fightOrganismId = 0L,
      __skillProcessId = 0,
      __targetId = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long],
      __skillOrganismId = 0,
      __skillPositionX = _root_.scala.None,
      __skillPositionY = _root_.scala.None,
      __skillId = 0,
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.skill.CS10055): Builder = new Builder(
        __fightOrganismId = _message__.fightOrganismId,
        __skillProcessId = _message__.skillProcessId,
        __targetId = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] ++= _message__.targetId,
        __skillOrganismId = _message__.skillOrganismId,
        __skillPositionX = _message__.skillPositionX,
        __skillPositionY = _message__.skillPositionY,
        __skillId = _message__.skillId,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.skill.CS10055.Builder()
  def newBuilder(`_message__`: protocol.skill.CS10055): Builder = protocol.skill.CS10055.Builder(_message__)
  implicit class CS10055Lens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.skill.CS10055]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.skill.CS10055](_l) {
    def fightOrganismId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.fightOrganismId)((c_, f_) => c_.copy(fightOrganismId = f_))
    def skillProcessId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.skillProcessId)((c_, f_) => c_.copy(skillProcessId = f_))
    def targetId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.targetId)((c_, f_) => c_.copy(targetId = f_))
    def skillOrganismId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.skillOrganismId)((c_, f_) => c_.copy(skillOrganismId = f_))
    def skillPositionX: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getSkillPositionX)((c_, f_) => c_.copy(skillPositionX = Option(f_)))
    def optionalSkillPositionX: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Float]] = field(_.skillPositionX)((c_, f_) => c_.copy(skillPositionX = f_))
    def skillPositionY: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getSkillPositionY)((c_, f_) => c_.copy(skillPositionY = Option(f_)))
    def optionalSkillPositionY: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Float]] = field(_.skillPositionY)((c_, f_) => c_.copy(skillPositionY = f_))
    def skillId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.skillId)((c_, f_) => c_.copy(skillId = f_))
  }
  final val FIGHTORGANISMID_FIELD_NUMBER = 1
  final val SKILLPROCESSID_FIELD_NUMBER = 2
  final val TARGETID_FIELD_NUMBER = 3
  final val SKILLORGANISMID_FIELD_NUMBER = 4
  final val SKILLPOSITIONX_FIELD_NUMBER = 5
  final val SKILLPOSITIONY_FIELD_NUMBER = 6
  final val SKILLID_FIELD_NUMBER = 7
  def of(
    fightOrganismId: _root_.scala.Long,
    skillProcessId: _root_.scala.Int,
    targetId: _root_.scala.Seq[_root_.scala.Long],
    skillOrganismId: _root_.scala.Int,
    skillPositionX: _root_.scala.Option[_root_.scala.Float],
    skillPositionY: _root_.scala.Option[_root_.scala.Float],
    skillId: _root_.scala.Int
  ): _root_.protocol.skill.CS10055 = _root_.protocol.skill.CS10055(
    fightOrganismId,
    skillProcessId,
    targetId,
    skillOrganismId,
    skillPositionX,
    skillPositionY,
    skillId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.CS10055])
}
