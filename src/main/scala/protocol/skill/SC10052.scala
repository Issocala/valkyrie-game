// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.skill

/** @param skillId
  *  技能id
  * @param attackId
  *  施法战斗者
  * @param targetId
  *  目标战斗者
  * @param damageType
  *  位运算计算伤害类型汇总
  * @param damage
  *  伤害数值
  */
@SerialVersionUID(0L)
final case class SC10052(
    skillId: _root_.scala.Int,
    attackId: _root_.scala.Long,
    targetId: _root_.scala.Long,
    damageType: _root_.scala.Int,
    damage: _root_.scala.Long,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SC10052] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = skillId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      };
      
      {
        val __value = attackId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
      };
      
      {
        val __value = targetId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
      };
      
      {
        val __value = damageType
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
      };
      
      {
        val __value = damage
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = skillId
        _output__.writeInt32(1, __v)
      };
      
      {
        val __v = attackId
        _output__.writeInt64(2, __v)
      };
      
      {
        val __v = targetId
        _output__.writeInt64(3, __v)
      };
      
      {
        val __v = damageType
        _output__.writeInt32(4, __v)
      };
      
      {
        val __v = damage
        _output__.writeInt64(5, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withSkillId(__v: _root_.scala.Int): SC10052 = copy(skillId = __v)
    def withAttackId(__v: _root_.scala.Long): SC10052 = copy(attackId = __v)
    def withTargetId(__v: _root_.scala.Long): SC10052 = copy(targetId = __v)
    def withDamageType(__v: _root_.scala.Int): SC10052 = copy(damageType = __v)
    def withDamage(__v: _root_.scala.Long): SC10052 = copy(damage = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => skillId
        case 2 => attackId
        case 3 => targetId
        case 4 => damageType
        case 5 => damage
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(skillId)
        case 2 => _root_.scalapb.descriptors.PLong(attackId)
        case 3 => _root_.scalapb.descriptors.PLong(targetId)
        case 4 => _root_.scalapb.descriptors.PInt(damageType)
        case 5 => _root_.scalapb.descriptors.PLong(damage)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.skill.SC10052
    // @@protoc_insertion_point(GeneratedMessage[protocol.SC10052])
}

object SC10052 extends scalapb.GeneratedMessageCompanion[protocol.skill.SC10052] with scalapb.HasBuilder[protocol.skill.SC10052] with scalapb.JavaProtoSupport[protocol.skill.SC10052, protocol.Skill.SC10052] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.skill.SC10052] with scalapb.HasBuilder[protocol.skill.SC10052] with scalapb.JavaProtoSupport[protocol.skill.SC10052, protocol.Skill.SC10052] = this
  def toJavaProto(scalaPbSource: protocol.skill.SC10052): protocol.Skill.SC10052 = {
    val javaPbOut = protocol.Skill.SC10052.newBuilder
    javaPbOut.setSkillId(scalaPbSource.skillId)
    javaPbOut.setAttackId(scalaPbSource.attackId)
    javaPbOut.setTargetId(scalaPbSource.targetId)
    javaPbOut.setDamageType(scalaPbSource.damageType)
    javaPbOut.setDamage(scalaPbSource.damage)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Skill.SC10052): protocol.skill.SC10052 = protocol.skill.SC10052(
    skillId = javaPbSource.getSkillId.intValue,
    attackId = javaPbSource.getAttackId.longValue,
    targetId = javaPbSource.getTargetId.longValue,
    damageType = javaPbSource.getDamageType.intValue,
    damage = javaPbSource.getDamage.longValue
  )
  def merge(`_message__`: protocol.skill.SC10052, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.skill.SC10052 = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.skill.SC10052] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.skill.SC10052(
        skillId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        attackId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Long],
        targetId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Long],
        damageType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[_root_.scala.Int],
        damage = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scala.Long]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SkillProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SkillProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.skill.SC10052(
    skillId = 0,
    attackId = 0L,
    targetId = 0L,
    damageType = 0,
    damage = 0L
  )
  final class Builder private (
    private var __skillId: _root_.scala.Int,
    private var __attackId: _root_.scala.Long,
    private var __targetId: _root_.scala.Long,
    private var __damageType: _root_.scala.Int,
    private var __damage: _root_.scala.Long,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.skill.SC10052] {
    private var __requiredFields0: _root_.scala.Long = 0x1fL
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __skillId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __attackId = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __targetId = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __damageType = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 40 =>
            __damage = _input__.readInt64()
            __requiredFields0 &= 0xffffffffffffffefL
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.skill.SC10052 = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protocol.skill.SC10052(
        skillId = __skillId,
        attackId = __attackId,
        targetId = __targetId,
        damageType = __damageType,
        damage = __damage,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.skill.SC10052, protocol.skill.SC10052.Builder] {
    def apply(): Builder = new Builder(
      __skillId = 0,
      __attackId = 0L,
      __targetId = 0L,
      __damageType = 0,
      __damage = 0L,
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.skill.SC10052): Builder = new Builder(
        __skillId = _message__.skillId,
        __attackId = _message__.attackId,
        __targetId = _message__.targetId,
        __damageType = _message__.damageType,
        __damage = _message__.damage,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.skill.SC10052.Builder()
  def newBuilder(`_message__`: protocol.skill.SC10052): Builder = protocol.skill.SC10052.Builder(_message__)
  implicit class SC10052Lens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.skill.SC10052]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.skill.SC10052](_l) {
    def skillId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.skillId)((c_, f_) => c_.copy(skillId = f_))
    def attackId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.attackId)((c_, f_) => c_.copy(attackId = f_))
    def targetId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.targetId)((c_, f_) => c_.copy(targetId = f_))
    def damageType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.damageType)((c_, f_) => c_.copy(damageType = f_))
    def damage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.damage)((c_, f_) => c_.copy(damage = f_))
  }
  final val SKILLID_FIELD_NUMBER = 1
  final val ATTACKID_FIELD_NUMBER = 2
  final val TARGETID_FIELD_NUMBER = 3
  final val DAMAGETYPE_FIELD_NUMBER = 4
  final val DAMAGE_FIELD_NUMBER = 5
  def of(
    skillId: _root_.scala.Int,
    attackId: _root_.scala.Long,
    targetId: _root_.scala.Long,
    damageType: _root_.scala.Int,
    damage: _root_.scala.Long
  ): _root_.protocol.skill.SC10052 = _root_.protocol.skill.SC10052(
    skillId,
    attackId,
    targetId,
    damageType,
    damage
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.SC10052])
}
