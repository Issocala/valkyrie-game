// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.equip
import _root_.scalapb.internal.compat.JavaConverters._

/** 请求穿戴装备
  *
  * @param wearIds
  *   装备唯一ID列表
  */
@SerialVersionUID(0L)
final case class CS11101(
    wearIds: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CS11101] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      wearIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      wearIds.foreach { __v =>
        val __m = __v
        _output__.writeInt64(1, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def clearWearIds = copy(wearIds = _root_.scala.Seq.empty)
    def addWearIds(__vs: _root_.scala.Long*): CS11101 = addAllWearIds(__vs)
    def addAllWearIds(__vs: Iterable[_root_.scala.Long]): CS11101 = copy(wearIds = wearIds ++ __vs)
    def withWearIds(__v: _root_.scala.Seq[_root_.scala.Long]): CS11101 = copy(wearIds = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => wearIds
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(wearIds.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.equip.CS11101
    // @@protoc_insertion_point(GeneratedMessage[protocol.CS11101])
}

object CS11101 extends scalapb.GeneratedMessageCompanion[protocol.equip.CS11101] with scalapb.HasBuilder[protocol.equip.CS11101] with scalapb.JavaProtoSupport[protocol.equip.CS11101, protocol.Equip.CS11101] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.equip.CS11101] with scalapb.HasBuilder[protocol.equip.CS11101] with scalapb.JavaProtoSupport[protocol.equip.CS11101, protocol.Equip.CS11101] = this
  def toJavaProto(scalaPbSource: protocol.equip.CS11101): protocol.Equip.CS11101 = {
    val javaPbOut = protocol.Equip.CS11101.newBuilder
    javaPbOut.addAllWearIds(_root_.scalapb.internal.compat.toIterable(scalaPbSource.wearIds.iterator.map(_root_.scala.Long.box(_))).asJava)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Equip.CS11101): protocol.equip.CS11101 = protocol.equip.CS11101(
    wearIds = javaPbSource.getWearIdsList.asScala.iterator.map(_.longValue).toSeq
  )
  def merge(`_message__`: protocol.equip.CS11101, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.equip.CS11101 = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.equip.CS11101] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.equip.CS11101(
        wearIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EquipProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EquipProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.equip.CS11101(
    wearIds = _root_.scala.Seq.empty
  )
  final class Builder private (
    private val __wearIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.equip.CS11101] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __wearIds += _input__.readInt64()
          case 10 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __wearIds += _input__.readInt64()
            }
            _input__.popLimit(oldLimit)
          }
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.equip.CS11101 = {
      protocol.equip.CS11101(
        wearIds = __wearIds.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.equip.CS11101, protocol.equip.CS11101.Builder] {
    def apply(): Builder = new Builder(
      __wearIds = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long],
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.equip.CS11101): Builder = new Builder(
        __wearIds = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] ++= _message__.wearIds,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.equip.CS11101.Builder()
  def newBuilder(`_message__`: protocol.equip.CS11101): Builder = protocol.equip.CS11101.Builder(_message__)
  implicit class CS11101Lens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.equip.CS11101]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.equip.CS11101](_l) {
    def wearIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.wearIds)((c_, f_) => c_.copy(wearIds = f_))
  }
  final val WEARIDS_FIELD_NUMBER = 1
  def of(
    wearIds: _root_.scala.Seq[_root_.scala.Long]
  ): _root_.protocol.equip.CS11101 = _root_.protocol.equip.CS11101(
    wearIds
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.CS11101])
}
