// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.bag

/** 背包信息
  *
  * @param id
  *   背包唯一ID
  * @param itemId
  *   道具配置ID
  * @param equip
  *   装备附加信息
  */
@SerialVersionUID(0L)
final case class BagInfo(
    id: _root_.scala.Long,
    itemId: _root_.scala.Int,
    equip: _root_.scala.Option[protocol.equip.EquipExtraInfo] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BagInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      };
      
      {
        val __value = itemId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      if (equip.isDefined) {
        val __value = equip.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = id
        _output__.writeInt64(1, __v)
      };
      
      {
        val __v = itemId
        _output__.writeInt32(2, __v)
      };
      equip.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Long): BagInfo = copy(id = __v)
    def withItemId(__v: _root_.scala.Int): BagInfo = copy(itemId = __v)
    def getEquip: protocol.equip.EquipExtraInfo = equip.getOrElse(protocol.equip.EquipExtraInfo.defaultInstance)
    def clearEquip: BagInfo = copy(equip = _root_.scala.None)
    def withEquip(__v: protocol.equip.EquipExtraInfo): BagInfo = copy(equip = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id
        case 2 => itemId
        case 3 => equip.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(id)
        case 2 => _root_.scalapb.descriptors.PInt(itemId)
        case 3 => equip.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.bag.BagInfo
    // @@protoc_insertion_point(GeneratedMessage[protocol.BagInfo])
}

object BagInfo extends scalapb.GeneratedMessageCompanion[protocol.bag.BagInfo] with scalapb.HasBuilder[protocol.bag.BagInfo] with scalapb.JavaProtoSupport[protocol.bag.BagInfo, protocol.Bag.BagInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.bag.BagInfo] with scalapb.HasBuilder[protocol.bag.BagInfo] with scalapb.JavaProtoSupport[protocol.bag.BagInfo, protocol.Bag.BagInfo] = this
  def toJavaProto(scalaPbSource: protocol.bag.BagInfo): protocol.Bag.BagInfo = {
    val javaPbOut = protocol.Bag.BagInfo.newBuilder
    javaPbOut.setId(scalaPbSource.id)
    javaPbOut.setItemId(scalaPbSource.itemId)
    scalaPbSource.equip.map(protocol.equip.EquipExtraInfo.toJavaProto(_)).foreach(javaPbOut.setEquip)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Bag.BagInfo): protocol.bag.BagInfo = protocol.bag.BagInfo(
    id = javaPbSource.getId.longValue,
    itemId = javaPbSource.getItemId.intValue,
    equip = if (javaPbSource.hasEquip) Some(protocol.equip.EquipExtraInfo.fromJavaProto(javaPbSource.getEquip)) else _root_.scala.None
  )
  def merge(`_message__`: protocol.bag.BagInfo, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.bag.BagInfo = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.bag.BagInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.bag.BagInfo(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Long],
        itemId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        equip = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[protocol.equip.EquipExtraInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BagProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BagProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = protocol.equip.EquipExtraInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.bag.BagInfo(
    id = 0L,
    itemId = 0,
    equip = _root_.scala.None
  )
  final class Builder private (
    private var __id: _root_.scala.Long,
    private var __itemId: _root_.scala.Int,
    private var __equip: _root_.scala.Option[protocol.equip.EquipExtraInfo],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.bag.BagInfo] {
    private var __requiredFields0: _root_.scala.Long = 0x3L
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __itemId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __equip = Option(__equip.fold(_root_.scalapb.LiteParser.readMessage[protocol.equip.EquipExtraInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.bag.BagInfo = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protocol.bag.BagInfo(
        id = __id,
        itemId = __itemId,
        equip = __equip,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.bag.BagInfo, protocol.bag.BagInfo.Builder] {
    def apply(): Builder = new Builder(
      __id = 0L,
      __itemId = 0,
      __equip = _root_.scala.None,
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.bag.BagInfo): Builder = new Builder(
        __id = _message__.id,
        __itemId = _message__.itemId,
        __equip = _message__.equip,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.bag.BagInfo.Builder()
  def newBuilder(`_message__`: protocol.bag.BagInfo): Builder = protocol.bag.BagInfo.Builder(_message__)
  implicit class BagInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.bag.BagInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.bag.BagInfo](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def itemId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.itemId)((c_, f_) => c_.copy(itemId = f_))
    def equip: _root_.scalapb.lenses.Lens[UpperPB, protocol.equip.EquipExtraInfo] = field(_.getEquip)((c_, f_) => c_.copy(equip = Option(f_)))
    def optionalEquip: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[protocol.equip.EquipExtraInfo]] = field(_.equip)((c_, f_) => c_.copy(equip = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val ITEMID_FIELD_NUMBER = 2
  final val EQUIP_FIELD_NUMBER = 3
  def of(
    id: _root_.scala.Long,
    itemId: _root_.scala.Int,
    equip: _root_.scala.Option[protocol.equip.EquipExtraInfo]
  ): _root_.protocol.bag.BagInfo = _root_.protocol.bag.BagInfo(
    id,
    itemId,
    equip
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.BagInfo])
}
