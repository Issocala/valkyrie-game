// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.mail

@SerialVersionUID(0L)
final case class AnnexMap(
    itemId: _root_.scala.Int,
    num: _root_.scala.Int,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AnnexMap] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = itemId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      };
      
      {
        val __value = num
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = itemId
        _output__.writeInt32(1, __v)
      };
      
      {
        val __v = num
        _output__.writeInt32(2, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withItemId(__v: _root_.scala.Int): AnnexMap = copy(itemId = __v)
    def withNum(__v: _root_.scala.Int): AnnexMap = copy(num = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => itemId
        case 2 => num
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(itemId)
        case 2 => _root_.scalapb.descriptors.PInt(num)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.mail.AnnexMap
    // @@protoc_insertion_point(GeneratedMessage[protocol.AnnexMap])
}

object AnnexMap extends scalapb.GeneratedMessageCompanion[protocol.mail.AnnexMap] with scalapb.HasBuilder[protocol.mail.AnnexMap] with scalapb.JavaProtoSupport[protocol.mail.AnnexMap, protocol.Mail.AnnexMap] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.mail.AnnexMap] with scalapb.HasBuilder[protocol.mail.AnnexMap] with scalapb.JavaProtoSupport[protocol.mail.AnnexMap, protocol.Mail.AnnexMap] = this
  def toJavaProto(scalaPbSource: protocol.mail.AnnexMap): protocol.Mail.AnnexMap = {
    val javaPbOut = protocol.Mail.AnnexMap.newBuilder
    javaPbOut.setItemId(scalaPbSource.itemId)
    javaPbOut.setNum(scalaPbSource.num)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Mail.AnnexMap): protocol.mail.AnnexMap = protocol.mail.AnnexMap(
    itemId = javaPbSource.getItemId.intValue,
    num = javaPbSource.getNum.intValue
  )
  def merge(`_message__`: protocol.mail.AnnexMap, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.mail.AnnexMap = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.mail.AnnexMap] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.mail.AnnexMap(
        itemId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        num = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MailProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MailProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.mail.AnnexMap(
    itemId = 0,
    num = 0
  )
  final class Builder private (
    private var __itemId: _root_.scala.Int,
    private var __num: _root_.scala.Int,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.mail.AnnexMap] {
    private var __requiredFields0: _root_.scala.Long = 0x3L
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __itemId = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __num = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.mail.AnnexMap = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protocol.mail.AnnexMap(
        itemId = __itemId,
        num = __num,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.mail.AnnexMap, protocol.mail.AnnexMap.Builder] {
    def apply(): Builder = new Builder(
      __itemId = 0,
      __num = 0,
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.mail.AnnexMap): Builder = new Builder(
        __itemId = _message__.itemId,
        __num = _message__.num,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.mail.AnnexMap.Builder()
  def newBuilder(`_message__`: protocol.mail.AnnexMap): Builder = protocol.mail.AnnexMap.Builder(_message__)
  implicit class AnnexMapLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.mail.AnnexMap]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.mail.AnnexMap](_l) {
    def itemId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.itemId)((c_, f_) => c_.copy(itemId = f_))
    def num: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.num)((c_, f_) => c_.copy(num = f_))
  }
  final val ITEMID_FIELD_NUMBER = 1
  final val NUM_FIELD_NUMBER = 2
  def of(
    itemId: _root_.scala.Int,
    num: _root_.scala.Int
  ): _root_.protocol.mail.AnnexMap = _root_.protocol.mail.AnnexMap(
    itemId,
    num
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.AnnexMap])
}
