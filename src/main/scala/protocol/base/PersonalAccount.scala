// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.base

@SerialVersionUID(0L)
final case class PersonalAccount(
    id: _root_.scala.Long,
    user: _root_.scala.Long,
    platform: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    account: _root_.scala.Predef.String,
    password: _root_.scala.Predef.String,
    comment: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    timestamp: _root_.scala.Long,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PersonalAccount] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      };
      
      {
        val __value = user
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
      };
      if (platform.isDefined) {
        val __value = platform.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      
      {
        val __value = account
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      };
      
      {
        val __value = password
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      };
      if (comment.isDefined) {
        val __value = comment.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      };
      
      {
        val __value = timestamp
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = id
        _output__.writeInt64(1, __v)
      };
      
      {
        val __v = user
        _output__.writeInt64(2, __v)
      };
      platform.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      
      {
        val __v = account
        _output__.writeString(4, __v)
      };
      
      {
        val __v = password
        _output__.writeString(5, __v)
      };
      comment.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      
      {
        val __v = timestamp
        _output__.writeInt64(7, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Long): PersonalAccount = copy(id = __v)
    def withUser(__v: _root_.scala.Long): PersonalAccount = copy(user = __v)
    def getPlatform: _root_.scala.Predef.String = platform.getOrElse("")
    def clearPlatform: PersonalAccount = copy(platform = _root_.scala.None)
    def withPlatform(__v: _root_.scala.Predef.String): PersonalAccount = copy(platform = Option(__v))
    def withAccount(__v: _root_.scala.Predef.String): PersonalAccount = copy(account = __v)
    def withPassword(__v: _root_.scala.Predef.String): PersonalAccount = copy(password = __v)
    def getComment: _root_.scala.Predef.String = comment.getOrElse("")
    def clearComment: PersonalAccount = copy(comment = _root_.scala.None)
    def withComment(__v: _root_.scala.Predef.String): PersonalAccount = copy(comment = Option(__v))
    def withTimestamp(__v: _root_.scala.Long): PersonalAccount = copy(timestamp = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id
        case 2 => user
        case 3 => platform.orNull
        case 4 => account
        case 5 => password
        case 6 => comment.orNull
        case 7 => timestamp
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(id)
        case 2 => _root_.scalapb.descriptors.PLong(user)
        case 3 => platform.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PString(account)
        case 5 => _root_.scalapb.descriptors.PString(password)
        case 6 => comment.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PLong(timestamp)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protocol.base.PersonalAccount
    // @@protoc_insertion_point(GeneratedMessage[protocol.PersonalAccount])
}

object PersonalAccount extends scalapb.GeneratedMessageCompanion[protocol.base.PersonalAccount] with scalapb.HasBuilder[protocol.base.PersonalAccount] with scalapb.JavaProtoSupport[protocol.base.PersonalAccount, protocol.Base.PersonalAccount] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.base.PersonalAccount] with scalapb.HasBuilder[protocol.base.PersonalAccount] with scalapb.JavaProtoSupport[protocol.base.PersonalAccount, protocol.Base.PersonalAccount] = this
  def toJavaProto(scalaPbSource: protocol.base.PersonalAccount): protocol.Base.PersonalAccount = {
    val javaPbOut = protocol.Base.PersonalAccount.newBuilder
    javaPbOut.setId(scalaPbSource.id)
    javaPbOut.setUser(scalaPbSource.user)
    scalaPbSource.platform.foreach(javaPbOut.setPlatform)
    javaPbOut.setAccount(scalaPbSource.account)
    javaPbOut.setPassword(scalaPbSource.password)
    scalaPbSource.comment.foreach(javaPbOut.setComment)
    javaPbOut.setTimestamp(scalaPbSource.timestamp)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: protocol.Base.PersonalAccount): protocol.base.PersonalAccount = protocol.base.PersonalAccount(
    id = javaPbSource.getId.longValue,
    user = javaPbSource.getUser.longValue,
    platform = if (javaPbSource.hasPlatform) Some(javaPbSource.getPlatform) else _root_.scala.None,
    account = javaPbSource.getAccount,
    password = javaPbSource.getPassword,
    comment = if (javaPbSource.hasComment) Some(javaPbSource.getComment) else _root_.scala.None,
    timestamp = javaPbSource.getTimestamp.longValue
  )
  def merge(`_message__`: protocol.base.PersonalAccount, `_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.base.PersonalAccount = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.base.PersonalAccount] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.base.PersonalAccount(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Long],
        user = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Long],
        platform = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        account = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[_root_.scala.Predef.String],
        password = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scala.Predef.String],
        comment = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[_root_.scala.Long]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BaseProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BaseProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.base.PersonalAccount(
    id = 0L,
    user = 0L,
    platform = _root_.scala.None,
    account = "",
    password = "",
    comment = _root_.scala.None,
    timestamp = 0L
  )
  final class Builder private (
    private var __id: _root_.scala.Long,
    private var __user: _root_.scala.Long,
    private var __platform: _root_.scala.Option[_root_.scala.Predef.String],
    private var __account: _root_.scala.Predef.String,
    private var __password: _root_.scala.Predef.String,
    private var __comment: _root_.scala.Option[_root_.scala.Predef.String],
    private var __timestamp: _root_.scala.Long,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[protocol.base.PersonalAccount] {
    private var __requiredFields0: _root_.scala.Long = 0x1fL
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __user = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __platform = Option(_input__.readStringRequireUtf8())
          case 34 =>
            __account = _input__.readStringRequireUtf8()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 42 =>
            __password = _input__.readStringRequireUtf8()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 50 =>
            __comment = Option(_input__.readStringRequireUtf8())
          case 56 =>
            __timestamp = _input__.readInt64()
            __requiredFields0 &= 0xffffffffffffffefL
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): protocol.base.PersonalAccount = {
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protocol.base.PersonalAccount(
        id = __id,
        user = __user,
        platform = __platform,
        account = __account,
        password = __password,
        comment = __comment,
        timestamp = __timestamp,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[protocol.base.PersonalAccount, protocol.base.PersonalAccount.Builder] {
    def apply(): Builder = new Builder(
      __id = 0L,
      __user = 0L,
      __platform = _root_.scala.None,
      __account = "",
      __password = "",
      __comment = _root_.scala.None,
      __timestamp = 0L,
      `_unknownFields__` = null
    )
    def apply(`_message__`: protocol.base.PersonalAccount): Builder = new Builder(
        __id = _message__.id,
        __user = _message__.user,
        __platform = _message__.platform,
        __account = _message__.account,
        __password = _message__.password,
        __comment = _message__.comment,
        __timestamp = _message__.timestamp,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = protocol.base.PersonalAccount.Builder()
  def newBuilder(`_message__`: protocol.base.PersonalAccount): Builder = protocol.base.PersonalAccount.Builder(_message__)
  implicit class PersonalAccountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.base.PersonalAccount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.base.PersonalAccount](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def platform: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPlatform)((c_, f_) => c_.copy(platform = Option(f_)))
    def optionalPlatform: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.platform)((c_, f_) => c_.copy(platform = f_))
    def account: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.account)((c_, f_) => c_.copy(account = f_))
    def password: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.password)((c_, f_) => c_.copy(password = f_))
    def comment: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getComment)((c_, f_) => c_.copy(comment = Option(f_)))
    def optionalComment: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.comment)((c_, f_) => c_.copy(comment = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val USER_FIELD_NUMBER = 2
  final val PLATFORM_FIELD_NUMBER = 3
  final val ACCOUNT_FIELD_NUMBER = 4
  final val PASSWORD_FIELD_NUMBER = 5
  final val COMMENT_FIELD_NUMBER = 6
  final val TIMESTAMP_FIELD_NUMBER = 7
  def of(
    id: _root_.scala.Long,
    user: _root_.scala.Long,
    platform: _root_.scala.Option[_root_.scala.Predef.String],
    account: _root_.scala.Predef.String,
    password: _root_.scala.Predef.String,
    comment: _root_.scala.Option[_root_.scala.Predef.String],
    timestamp: _root_.scala.Long
  ): _root_.protocol.base.PersonalAccount = _root_.protocol.base.PersonalAccount(
    id,
    user,
    platform,
    account,
    password,
    comment,
    timestamp
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.PersonalAccount])
}
